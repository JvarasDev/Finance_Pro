generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String
  password        String
  plan            Plan             @default(FREE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  expenses        Expense[]
  goals           Goal[]
  incomes         Income[]
  notifications   Notification[]
  recommendations Recommendation[]
  courses         UserCourse[]
}

model Income {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  category    String
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Expense {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  category    String
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id            String    @id @default(cuid())
  userId        String
  name          String
  targetAmount  Float
  currentAmount Float     @default(0)
  deadline      DateTime?
  icon          String
  color         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recommendation {
  id          String             @id @default(cuid())
  userId      String
  type        RecommendationType
  title       String
  description String
  impact      String
  priority    Priority
  applied     Boolean            @default(false)
  createdAt   DateTime           @default(now())
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String
  duration    String
  level       CourseLevel
  icon        String
  color       String
  content     String
  createdAt   DateTime     @default(now())
  userCourses UserCourse[]
}

model UserCourse {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  progress    Int       @default(0)
  completed   Boolean   @default(false)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Plan {
  FREE
  PREMIUM
}

enum RecommendationType {
  SAVING
  INVESTMENT
  BUDGET
  EDUCATION
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}
